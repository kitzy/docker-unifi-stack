networks:
  proxy:
    external: true
    name: proxy              # same network NPM container uses
  unifi-backend:             # private network for app <-> db
    driver: bridge

volumes:
  config: {}           
  mongo_data: {}       

services:
  unifi-network-application:
    image: lscr.io/linuxserver/unifi-network-application:latest
    depends_on:
      mongodb:
        condition: service_healthy
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - MONGO_USER=${MONGO_USER}
      - MONGO_PASS=${MONGO_PASS}
      - MONGO_HOST=unifi-db    # Apparetly this value is hardcoded somewhere in the unifi-network-application container
      - MONGO_PORT=27017
      - MONGO_DBNAME=${MONGO_DBNAME}
      - MONGO_AUTHSOURCE=${MONGO_AUTHSOURCE}
      - MONGO_TLS=${MONGO_TLS}
      # JVM heap tuning (optional)
      - MEM_LIMIT=${MEM_LIMIT}
      - MEM_STARTUP=${MEM_STARTUP}
    volumes:
      - config:/config
    networks:
      - proxy
      - unifi-backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- https://127.0.0.1:8443/ --no-check-certificate >/dev/null 2>&1 || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 10

  mongodb:
    image: mongo:7
    environment:
      - TZ=${TZ}
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}
      - MONGO_USER=${MONGO_USER}
      - MONGO_PASS=${MONGO_PASS}
      - MONGO_DBNAME=${MONGO_DBNAME}
      - MONGO_AUTHSOURCE=${MONGO_AUTHSOURCE}
    volumes:
      - mongo_data:/data/db
    networks:
      unifi-backend:
        aliases:
          - unifi-db    # Apparetly this value is hardcoded somewhere in the unifi-network-application container
    healthcheck:
      test: ["CMD-SHELL", "echo 'db.runCommand({ ping: 1 }).ok' | mongosh mongodb://localhost:27017/test --quiet | grep -q 1"]
      interval: 20s
      timeout: 5s
      retries: 10
    restart: unless-stopped
